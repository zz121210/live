{"ast":null,"code":"import { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChat = roomId => {\n  const [messages, setMessages] = useState([]);\n  const socketRef = useRef();\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    });\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, message => {\n      const incomingMessage = { ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id\n      };\n      setMessages(messages => [...messages, incomingMessage]);\n    });\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      setStream(stream);\n      myVideo.current.srcObject = stream;\n    });\n    socket.on(\"me\", id => {\n      setMe(id);\n    });\n    socket.on(\"callUser\", data => {\n      setReceivingCall(true);\n      setCaller(data.from);\n      setName(data.name);\n      setCallerSignal(data.signal);\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]);\n\n  const sendMessage = messageBody => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id\n    });\n  };\n\n  return {\n    messages,\n    sendMessage\n  };\n};\n\nexport default useChat;","map":{"version":3,"sources":["D:/project/NodeJs/socket.io-react-hooks-chat-master/client/src/useChat.js"],"names":["useEffect","useRef","useState","socketIOClient","NEW_CHAT_MESSAGE_EVENT","SOCKET_SERVER_URL","useChat","roomId","messages","setMessages","socketRef","current","query","on","message","incomingMessage","ownedByCurrentUser","senderId","id","navigator","mediaDevices","getUserMedia","video","audio","then","stream","setStream","myVideo","srcObject","socket","setMe","data","setReceivingCall","setCaller","from","setName","name","setCallerSignal","signal","disconnect","sendMessage","messageBody","emit","body"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,sBAAsB,GAAG,gBAA/B;AACA,MAAMC,iBAAiB,GAAG,uBAA1B;;AAEA,MAAMC,OAAO,GAAIC,MAAD,IAAY;AAC1B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMQ,SAAS,GAAGT,MAAM,EAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,SAAS,CAACC,OAAV,GAAoBR,cAAc,CAACE,iBAAD,EAAoB;AACpDO,MAAAA,KAAK,EAAE;AAAEL,QAAAA;AAAF;AAD6C,KAApB,CAAlC;AAKAG,IAAAA,SAAS,CAACC,OAAV,CAAkBE,EAAlB,CAAqBT,sBAArB,EAA8CU,OAAD,IAAa;AACxD,YAAMC,eAAe,GAAG,EACtB,GAAGD,OADmB;AAEtBE,QAAAA,kBAAkB,EAAEF,OAAO,CAACG,QAAR,KAAqBP,SAAS,CAACC,OAAV,CAAkBO;AAFrC,OAAxB;AAIAT,MAAAA,WAAW,CAAED,QAAD,IAAc,CAAC,GAAGA,QAAJ,EAAcO,eAAd,CAAf,CAAX;AACD,KAND;AAQAI,IAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KAApC,EAAkEC,IAAlE,CAAwEC,MAAD,IAAY;AACpFC,MAAAA,SAAS,CAACD,MAAD,CAAT;AACCE,MAAAA,OAAO,CAAChB,OAAR,CAAgBiB,SAAhB,GAA4BH,MAA5B;AACD,KAHC;AAKHI,IAAAA,MAAM,CAAChB,EAAP,CAAU,IAAV,EAAiBK,EAAD,IAAQ;AACtBY,MAAAA,KAAK,CAACZ,EAAD,CAAL;AACA,KAFF;AAICW,IAAAA,MAAM,CAAChB,EAAP,CAAU,UAAV,EAAuBkB,IAAD,IAAU;AAC/BC,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAC,MAAAA,SAAS,CAACF,IAAI,CAACG,IAAN,CAAT;AACAC,MAAAA,OAAO,CAACJ,IAAI,CAACK,IAAN,CAAP;AACAC,MAAAA,eAAe,CAACN,IAAI,CAACO,MAAN,CAAf;AACA,KALD;AAOE,WAAO,MAAM;AACX5B,MAAAA,SAAS,CAACC,OAAV,CAAkB4B,UAAlB;AACD,KAFD;AAGD,GAjCQ,EAiCN,CAAChC,MAAD,CAjCM,CAAT;;AAmCA,QAAMiC,WAAW,GAAIC,WAAD,IAAiB;AACnC/B,IAAAA,SAAS,CAACC,OAAV,CAAkB+B,IAAlB,CAAuBtC,sBAAvB,EAA+C;AAC7CuC,MAAAA,IAAI,EAAEF,WADuC;AAE7CxB,MAAAA,QAAQ,EAAEP,SAAS,CAACC,OAAV,CAAkBO;AAFiB,KAA/C;AAID,GALD;;AAOA,SAAO;AAAEV,IAAAA,QAAF;AAAYgC,IAAAA;AAAZ,GAAP;AACD,CA/CD;;AAiDA,eAAelC,OAAf","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChat = (roomId) => {\n  const [messages, setMessages] = useState([]);\n  const socketRef = useRef();\n\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: { roomId },\n      \n    });\n\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id,\n      };\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\n\t\t\tsetStream(stream)\n\t\t\t\tmyVideo.current.srcObject = stream\n\t\t})\n\n\tsocket.on(\"me\", (id) => {\n\t\t\tsetMe(id)\n\t\t})\n\n\t\tsocket.on(\"callUser\", (data) => {\n\t\t\tsetReceivingCall(true)\n\t\t\tsetCaller(data.from)\n\t\t\tsetName(data.name)\n\t\t\tsetCallerSignal(data.signal)\n\t\t})\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]);\n\n  const sendMessage = (messageBody) => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n    });\n  };\n\n  return { messages, sendMessage };\n};\n\nexport default useChat;\n"]},"metadata":{},"sourceType":"module"}