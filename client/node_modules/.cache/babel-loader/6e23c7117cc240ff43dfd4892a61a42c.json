{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\NodeJs\\\\socket.io-react-hooks-chat-master\\\\client\\\\src\\\\ChatRoom\\\\ChatRoom.jsx\";\nimport React from \"react\";\nimport \"./ChatRoom.css\";\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\nconst Container = styled.div`\n    padding: 20px;\n    display: flex;\n    height: 100vh;\n    width: 90%;\n    margin: auto;\n    flex-wrap: wrap;\n`;\nconst StyledVideo = styled.video`\n    height: 40%;\n    width: 50%;\n`;\n\nconst Video = props => {\n  const ref = useRef();\n  useEffect(() => {\n    props.peer.on(\"stream\", stream => {\n      ref.current.srcObject = stream;\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(StyledVideo, {\n    playsInline: true,\n    autoPlay: true,\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  });\n};\n\nconst videoConstraints = {\n  height: window.innerHeight / 2,\n  width: window.innerWidth / 2\n};\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChat = roomId => {\n  const [messages, setMessages] = useState([]);\n  const socketRef = useRef();\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    });\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, message => {\n      const incomingMessage = { ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id\n      };\n      setMessages(messages => [...messages, incomingMessage]);\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]);\n\n  const sendMessage = messageBody => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id\n    });\n  };\n\n  return {\n    messages,\n    sendMessage\n  };\n};\n\nconst ChatRoom = props => {\n  const {\n    roomId\n  } = props.match.params;\n  const {\n    messages,\n    sendMessage\n  } = useChat(roomId);\n  const [newMessage, setNewMessage] = React.useState(\"\");\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n\n  const handleNewMessageChange = event => {\n    setNewMessage(event.target.value);\n  };\n\n  const handleSendMessage = () => {\n    sendMessage(newMessage);\n    setNewMessage(\"\");\n  };\n\n  useEffect(() => {\n    socketRef.current = io.connect(\"/\");\n    navigator.mediaDevices.getUserMedia({\n      video: videoConstraints,\n      audio: true\n    }).then(stream => {\n      userVideo.current.srcObject = stream;\n      socketRef.current.emit(\"join room\", roomID);\n      socketRef.current.on(\"all users\", users => {\n        const peers = [];\n        users.forEach(userID => {\n          const peer = createPeer(userID, socketRef.current.id, stream);\n          peersRef.current.push({\n            peerID: userID,\n            peer\n          });\n          peers.push(peer);\n        });\n        setPeers(peers);\n      });\n      socketRef.current.on(\"user joined\", payload => {\n        const peer = addPeer(payload.signal, payload.callerID, stream);\n        peersRef.current.push({\n          peerID: payload.callerID,\n          peer\n        });\n        setPeers(users => [...users, peer]);\n      });\n      socketRef.current.on(\"receiving returned signal\", payload => {\n        const item = peersRef.current.find(p => p.peerID === payload.id);\n        item.peer.signal(payload.signal);\n      });\n    });\n  }, []);\n\n  function createPeer(userToSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"sending signal\", {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n    return peer;\n  }\n\n  function addPeer(incomingSignal, callerID, stream) {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on(\"signal\", signal => {\n      socketRef.current.emit(\"returning signal\", {\n        signal,\n        callerID\n      });\n    });\n    peer.signal(incomingSignal);\n    return peer;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-room-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"room-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, \"Room: \", roomId), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"messages-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"ol\", {\n    className: \"messages-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, messages.map((message, i) => /*#__PURE__*/React.createElement(\"li\", {\n    key: i,\n    className: `message-item ${message.ownedByCurrentUser ? \"my-message\" : \"received-message\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, message.body)))), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: newMessage,\n    onChange: handleNewMessageChange,\n    placeholder: \"Write message...\",\n    className: \"new-message-input-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSendMessage,\n    className: \"send-message-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, \"Send\"));\n};\n\nexport default ChatRoom;","map":{"version":3,"sources":["D:/project/NodeJs/socket.io-react-hooks-chat-master/client/src/ChatRoom/ChatRoom.jsx"],"names":["React","useEffect","useRef","useState","socketIOClient","Peer","styled","Container","div","StyledVideo","video","Video","props","ref","peer","on","stream","current","srcObject","videoConstraints","height","window","innerHeight","width","innerWidth","NEW_CHAT_MESSAGE_EVENT","SOCKET_SERVER_URL","useChat","roomId","messages","setMessages","socketRef","query","message","incomingMessage","ownedByCurrentUser","senderId","id","disconnect","sendMessage","messageBody","emit","body","ChatRoom","match","params","newMessage","setNewMessage","peers","setPeers","userVideo","peersRef","handleNewMessageChange","event","target","value","handleSendMessage","io","connect","navigator","mediaDevices","getUserMedia","audio","then","roomID","users","forEach","userID","createPeer","push","peerID","payload","addPeer","signal","callerID","item","find","p","userToSignal","initiator","trickle","incomingSignal","map","i"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./ChatRoom.css\";\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n    padding: 20px;\n    display: flex;\n    height: 100vh;\n    width: 90%;\n    margin: auto;\n    flex-wrap: wrap;\n`;\n\nconst StyledVideo = styled.video`\n    height: 40%;\n    width: 50%;\n`;\n\nconst Video = (props) => {\n  const ref = useRef();\n\n  useEffect(() => {\n      props.peer.on(\"stream\", stream => {\n          ref.current.srcObject = stream;\n      })\n  }, []);\n\n  return (\n      <StyledVideo playsInline autoPlay ref={ref} />\n  );\n}\n\nconst videoConstraints = {\n  height: window.innerHeight / 2,\n  width: window.innerWidth / 2\n};\n\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChat = (roomId) => {\n  const [messages, setMessages] = useState([]);\n  const socketRef = useRef();\n\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: { roomId },\n    });\n\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id,\n      };\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]);\n\n  const sendMessage = (messageBody) => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n    });\n  };\n\n  return { messages, sendMessage };\n};\n\nconst ChatRoom = (props) => {\n  const { roomId } = props.match.params;\n  const { messages, sendMessage } = useChat(roomId);\n  const [newMessage, setNewMessage] = React.useState(\"\");\n  const [peers, setPeers] = useState([]);\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n\n\n  const handleNewMessageChange = (event) => {\n    setNewMessage(event.target.value);\n  };\n\n  const handleSendMessage = () => {\n    sendMessage(newMessage);\n    setNewMessage(\"\");\n  };\n\n  useEffect(() => {\n    socketRef.current = io.connect(\"/\");\n    navigator.mediaDevices.getUserMedia({ video: videoConstraints, audio: true }).then(stream => {\n        userVideo.current.srcObject = stream;\n        socketRef.current.emit(\"join room\", roomID);\n        socketRef.current.on(\"all users\", users => {\n            const peers = [];\n            users.forEach(userID => {\n                const peer = createPeer(userID, socketRef.current.id, stream);\n                peersRef.current.push({\n                    peerID: userID,\n                    peer,\n                })\n                peers.push(peer);\n            })\n            setPeers(peers);\n        })\n\n        socketRef.current.on(\"user joined\", payload => {\n            const peer = addPeer(payload.signal, payload.callerID, stream);\n            peersRef.current.push({\n                peerID: payload.callerID,\n                peer,\n            })\n\n            setPeers(users => [...users, peer]);\n        });\n\n        socketRef.current.on(\"receiving returned signal\", payload => {\n            const item = peersRef.current.find(p => p.peerID === payload.id);\n            item.peer.signal(payload.signal);\n        });\n    })\n}, []);\n\nfunction createPeer(userToSignal, callerID, stream) {\n    const peer = new Peer({\n        initiator: true,\n        trickle: false,\n        stream,\n    });\n\n    peer.on(\"signal\", signal => {\n        socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal })\n    })\n\n    return peer;\n}\n\nfunction addPeer(incomingSignal, callerID, stream) {\n    const peer = new Peer({\n        initiator: false,\n        trickle: false,\n        stream,\n    })\n\n    peer.on(\"signal\", signal => {\n        socketRef.current.emit(\"returning signal\", { signal, callerID })\n    })\n\n    peer.signal(incomingSignal);\n\n    return peer;\n}\n\n  return (\n    <div className=\"chat-room-container\">\n      <h1 className=\"room-name\">Room: {roomId}</h1>\n      <div className=\"messages-container\">\n        <ol className=\"messages-list\">\n          {messages.map((message, i) => (\n            <li\n              key={i}\n              className={`message-item ${\n                message.ownedByCurrentUser ? \"my-message\" : \"received-message\"\n              }`}\n            >\n              {message.body}\n            </li>\n          ))}\n        </ol>\n      </div>\n      <textarea\n        value={newMessage}\n        onChange={handleNewMessageChange}\n        placeholder=\"Write message...\"\n        className=\"new-message-input-field\"\n      />\n      <button onClick={handleSendMessage} className=\"send-message-button\">\n        Send\n      </button>\n    </div>\n  );\n};\n\nexport default ChatRoom;\n"]},"metadata":{},"sourceType":"module"}